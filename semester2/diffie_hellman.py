from collections import namedtuple
from random import randint, choice
from math import isqrt

Configuration = namedtuple("Configuration", "p g")
CODE_CHARS = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ#_"
BIG_PRIME_NUMBERS = [
    25208791262564093809152199691789832888347505667585117497705292346071598749068270522070739883369772719947820912916064142049003092431356829719443729359880643657534503182203972536515933223991632875010618129046832622987317458840599973262158742607937844423818028487197799679172249910056410129191166036667730786046066450193406928871161748192875389628352211994233963955743058614656862485531554133673842327572035100538529735987634538176486249719044882494623120280857096628548303774332456802040025859713621284058455617631345717601748802987174744826570154662577243849415093091316149490039064757733704381786800652939436832263791,
    25775354355938296740747450734075433940660218507977977434258734006209827757713614849074546124166857334651692549227322584541672502122486831743359784348782604424697991360564648373482606394510098126917336779453436747100440090355305415579931250985277795145218715248294370327925153705619893608651721932602593612417274865982478426779328687534984549172521751135773482349751268757916517024986191027770178144329148004196426359244846967664431818436349357128796353049970321392109658074631771105969001601948533793071542515508219153335940520626718232269004177797518938175628875178133980405121057805677006982131915696659599552521693,
    27195925808791037385298366781097452537324756261147326656660340749776899829320207683428539731494648598683612076621237074762774728093137380991087181482097240215245053429374411224555604306345405515430016509713133109945730627798466616868193110506651762736148444791072753255270809205285564211572068362711945139274859775118577311990868628412135377164768252718331118368759480918185990455227904044921013205252403005104191780879075523102225500987097192029020996140167038426841354101925602673047567819035854014668487701657714480220825426619332695911034658260756873791856904131460684377076007661173721638021758410321577096660759,
    28500259667691409615124165313480305757441377604098807447947922231710420273781547274980376779910797389146760710956958339449276790273024932830339081318641450090367818945621395611243008165344990843536074943436643291970071844248437535174939971608734895240526902559051948600554478192026430325736418063052237208598281428456927361741815356560171070460636985433679898354531451951820473562555117356232819935552113754643740744489231079651134359600715894110890355868344148222672020249300931906251166363434972052052324186136964789514433560722212338196759350494970798217542232188866979169820526492552430202374932547357513678610029,
    29625006705687557997829991004802099203203551671309645205564661902387946317562271617924454472370936281352337407145272972336119660920118650800653391262504840072519240217413006476398976906684135618640372249794469971803399762998033769289254152930351287480371741110528464336497241510841521106151258476958754953924691157511767222513442478203008117061642190714508986351612499873864645571285616162893760440387574405965727375157040095096995604787890299621210790305112522713700423392072761332745721741072744547806287050369622081054608251423621121133918531758051645205463066261212991309615950973697578694932609474934166388303263,
    25634389167910363724930373921154931456215918850465749374184214948366113962776040601732061924473377828662328216815955977094977148594502755811086572829152231030349300037636627337088695304726675814298680635536776526841525834621001028799080655525649391878051262730653234983701167189658749120785085243863366229187762616014465821334438673557102364051984546465928924976345263641060521725138768731388311330310485473986442855488773832738540900560730335836986439597880372955208039316989125126518111552416696487739092260491417903739271648192253170340157931335217111968320420628515282876831198517602928984070789658150575510990379,
    29446478260540277555732510726837541109398896768723017365007032285691738099120446482752811695815443655281282297574411455709181212243494085424462824069916499905554000703925588293320975059502713935364963716441530088021960180873957863283499036951271601468456321280994697475823506789383125563144333109422041988097551542698587180760125757200754788737715873805127345786119215996910631525481168665421140641825317946024395609772602612559153013881817717446906606868616110258882411885189699577003478722340173132012210989163683228435825465674036943946402387111763299080002143075641316086744425165501847880172042491219347353998983,
]


def random_configuration():
    prime_number = choice(BIG_PRIME_NUMBERS)
    return Configuration(p=prime_number, g=randint(2, 99))


def random_private_key(config: Configuration):
    return randint(isqrt(config.p), config.p - 1)


def generate_public_key(config: Configuration, private_key: int):
    return pow(config.g, private_key, config.p)


def generate_secret(config: Configuration, private_key: int, contact_key: int):
    return pow(contact_key, private_key, config.p)


def str2int(s):
    s = s.replace(" ", "").replace("\n", "").replace("_", "")
    return int(s) if s else None


def secret2conjunction(secret, desired_length):
    secret = secret.to_bytes(((secret + 1).bit_length() + 7) // 8, "little")
    conjunction = secret[-(desired_length % len(secret)) :]
    while len(conjunction) < desired_length:
        conjunction += secret
    return conjunction


def encrypt_bytes(secret: int, message: bytes):
    conjunction = secret2conjunction(secret, len(message))
    return bytes(x ^ y for x, y in zip(message, conjunction))


def decrypt_bytes(secret: int, message: bytes):
    conjunction = secret2conjunction(secret, len(message))
    return bytes(x ^ y for x, y in zip(message, conjunction))


def bytes_to_base64(data: bytes):
    number, code = int.from_bytes(data + bytes([1]), "little"), []
    while number:
        code.append(CODE_CHARS[number % 64])
        number //= 64
    return "".join(code)


def base64_to_bytes(base64: str):
    number = 0
    for digit in map(CODE_CHARS.index, reversed(base64)):
        number = number * 64 + digit
    return number.to_bytes((number.bit_length() + 7) // 8, "little")[:-1]


def encrypt_message(secret: int, message: str):
    return bytes_to_base64(encrypt_bytes(secret, message.encode()))


def decrypt_message(secret: int, encrypted: str):
    return decrypt_bytes(secret, base64_to_bytes(encrypted)).decode()


def main():
    print(
        "The system will prompt you to enter the system parameters."
        + "Please don't resist.\n"
        + "If you don't want to enter the parameters, "
        + "you can leave some fields empty."
    )
    config = Configuration(*map(str2int, (input("p = "), input("g = "))))
    if not config.p or not config.g:
        config = random_configuration()
        print(f"\np = {config.p}\ng = {config.g}")
        input(
            "Press enter when you share your p and g values to your partner..."
        )
    private_key = str2int(input("\nprivate_key = "))
    if not private_key:
        private_key = random_private_key(config)
        print(f"private_key = {private_key}")
    public_key = generate_public_key(config, private_key)
    print(
        f"\npublic_key = {public_key}\n\n"
        + "Please, give your public key to your conversation partner.\n"
        + "Also ask your partner to give their public key to you\n"
    )
    contact_key = str2int(input("Public key of your conversation partner = "))
    secret = generate_secret(config, private_key, contact_key)
    # print(f"secret = {secret}")
    print(
        "\nYou have completed the configuration step.\n"
        + "Now you can encrypt or decrypt messages\n"
        + "Available commands:\n"
        + "\te [message] -- encrypt message\n"
        + "\td [message] -- decrypt message"
    )
    while True:
        cmd = input("> ")
        match cmd.split(" ", 1):
            case "e" | "E", msg:
                print(encrypt_message(secret, msg))
            case "d" | "D", msg:
                try:
                    print(decrypt_message(secret, msg))
                except UnicodeDecodeError:
                    print(
                        "Something is wrong: the decrypted message is corrupted."
                    )
            case unrecognized_command:
                if isinstance(unrecognized_command, list):
                    unrecognized_command = " ".join(unrecognized_command)
                print(
                    "Unrecognized_command:",
                    repr(" ".join(unrecognized_command)),
                )


if __name__ == "__main__":
    main()
